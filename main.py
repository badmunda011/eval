import logging
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Pyrogram Bot API
API_ID = "16457832"
API_HASH = "3030874d0befdb5d05597deacc3e83ab"
BOT_TOKEN = "7502185711:AAHVIGXxrRLb0WUyR606njxpRS2vz-jOduM"
OWNER_ID = 7009601543

app = Client(
    name="EVAL",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

arguments = [
    "smallcap",
    "monospace",
    "outline",
    "script",
    "blackbubbles",
    "bubbles",
    "bold",
    "bolditalic"
]

fonts = [
    "smallcap",
    "monospace",
    "outline",
    "script",
    "blackbubbles",
    "bubbles",
    "bold",
    "bolditalic"
]

_default = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
_smallcap = "·¥Ä ô·¥Ñ·¥Ö·¥á“ì…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥òœô Äs·¥õ·¥ú·¥†·¥°x è·¥¢ABCDEFGHIJKLMNOPQRSTUVWXYZ"
_monospace = "ùöäùöãùöåùöçùöéùöèùöêùöëùöíùöìùöîùöùùöïùöñùöóùöòùöôùööùöõùöúùöùùöûùöüùö†ùö°ùö¢ùö£ùô∞ùô±ùô≤ùô≥ùô¥ùôµùô∂‚Ñçùô∏ùôπùô∫ùôªùôºùôΩùôæùôøùöÄùöÅùöÇùöÉùöÑùöÖùöÜùöáùöàùöâ"
_outline = "ùïíùïìùïîùïïùïñùïóùïòùïôùïöùïõùïúùïùùïûùïüùï†ùï°ùï¢ùï£ùï§ùï•ùï¶ùïßùï®ùï©ùï™ùï´ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåùïçùïéùïèùïêùïë"
_script = "ùí∂ùí∑ùí∏ùíπùëíùíªùëîùíΩùíæùíøùìÄùìÅùìÇùìÉùëúùìÖùìÜùìáùìàùìâùìäùìãùìåùìçùìéùìèùíú‚Ñ¨ùíûùíü‚Ñ∞‚Ñ±ùí¢‚Ñã‚Ñêùí•ùí¶‚Ñí‚Ñ≥ùí©ùí™‚Ñôùí¨‚ÑõùíÆùíØùí∞ùí±ùí≤ùí≥ùí¥ùíµ"
_blackbubbles = "üÖêüÖëüÖíüÖìüÖîüÖïüÖñüÖóüÖòüÖôüÖöüÖõüÖúüÖùüÖûüÖüüÖ†üÖ°üÖ¢üÖ£üÖ§üÖ•üÖ¶üÖßüÖ®üÖ©üÖêüÖëüÖíüÖìüÖîüÖïüÖñüÖóüÖòüÖôüÖöüÖõüÖúüÖùüÖûüÖüüÖ†üÖ°üÖ¢üÖ£üÖ§üÖ•üÖ¶üÖßüÖ®üÖ©"
_bubbles = "‚ìê‚ìë‚ìí‚ìì‚ìî‚ìï‚ìñ‚ìó‚ìò‚ìô‚ìö‚ìõ‚ìú‚ìù‚ìû‚ìü‚ì†‚ì°‚ì¢‚ì£‚ì§‚ì•‚ì¶‚ìß‚ì®‚ì©‚í∂‚í∑‚í∏‚íπ‚í∫‚íª‚íº‚íΩ‚íæ‚íø‚ìÄ‚ìÅ‚ìÇ‚ìÉ‚ìÑ‚ìÖ‚ìÜ‚ìá‚ìà‚ìâ‚ìä‚ìã‚ìå‚ìç‚ìé‚ìè"
_bold = "ùóÆùóØùó∞ùó±ùó≤ùó≥ùó¥ùóµùó∂ùó∑ùó∏ùóπùó∫ùóªùóºùóΩùóæùóøùòÄùòÅùòÇùòÉùòÑùòÖùòÜùòáùóîùóïùóñùóóùóòùóôùóöùóõùóúùóùùóûùóüùó†ùó°ùó¢ùó£ùó§ùó•ùó¶ùóßùó®ùó©ùó™ùó´ùó¨ùóì"
_bolditalic = "ùôñùôóùôòùôôùôöùôõùôúùôùùôûùôüùô†ùô°ùô¢ùô£ùô§ùô•ùô¶ùôßùô®ùô©ùô™ùô´ùô¨ùô≠ùôÆùôØùòºùòΩùòæùòøùôÄùôÅùôÇùôÉùôÑùôÖùôÜùôáùôàùôâùôäùôãùôåùôçùôéùôèùôêùôëùôíùôìùôîùôï"

names_list = [
    "‚è§‚ÄåÕ¢‚ú∂‚ù•‚ÄåùÑü‚ÉüÕ¢üëëÍØ≠ÍØ®üÜÖÍØ≠ÍØ®ùù∏ùùºÕ†ÍØ≠ÍØ®ùù∞ÍØ≠ùù∞Õ†ÍØ®ùù∂·≠Ñ ùÜº‚Éù‚ô•Ô∏èùÑü‚ù•‚Ü≤Íßç",
    "·ØììÜ∞ùÖÉÍØ≠·≥öü¶Åùõ•ÍØ≠…¥ÍØ≠…¥ÍØ≠·¥èÍØ≠…¥ÍØ≠À∂ÕüÕù÷ü·çùÍØ≠ÍØ≠ÍØ≠ÍØ≠ÍØ≠ÍØ≠¬†‚ö°ÍØ≠ÍØ≠ÍØ≠ÍØ≠ÍØ≠",
    "‚û∫ÍØ≠ ÍØ≠ùÖ•‚ÄåùÜ¨ÍØ≠‚Äåü¶ã‚É™ÍØ≠ ‚îÄÕ¢‚Éõ‚îº ùûÑ‚Éïùñãùñã ùõ•ÍØ≠…¥ÍØ≠…¥ÍØ≠·¥èÍØ≠…¥ÍØ≠ü•µ‚Éù‚Éù·¨ΩÍØ≠ ‚É™ÍØ≠ ÍØ≠ùÖ•‚ÄåùÜ¨ÍØ≠‚Äå‚û∫ÍØ≠‚éØ‚éØ·™µ·™≥",
    "ü§ç ‚ç£‚É™Õú ·∂¶ Õ¢·µÉ·µê‚õ¶‚Éï‚Äå!‚ùõùÜº‚§π‡øóìÜ™Í™æ‚Ñ¢",
    "ìÜ∞ìè≤ùõ•ÍØ≠…¥ÍØ≠…¥ÍØ≠·¥èÍØ≠…¥ÍØ≠ìÇÉ÷∂Í™≥ ìÜ©„Ä¨„Ä≠ü¶ãìÜ™Í™æ",
    "‚óÑ‚ù•‚Äå‚Äå‚ù• ‚Éù‚É™‚Éïü¶ö‚üµ·∑ç·∑Ωùõ•ÍØ≠…¥ÍØ≠…¥ÍØ≠·¥èÍØ≠…¥ÍØ≠Àö‚Äå‚Äå‚Äå‚Äå‚ó°‚Äå‚Éùüê¨·™≥ ‚Äå‚É™îòì‚ùÅ‚Äå‚Äå‚ùç‚Ä¢:‚ûõ"
]

def gen_font(text, new_font):
    if len(text.split()) > 10:
        return text
    new_font = " ".join(new_font).split()
    for q in text:
        if q in _default:
            new = new_font[_default.index(q)]
            text = text.replace(q, new)
    return text

@app.on_message(filters.text & ~filters.forwarded & ~filters.via_bot)
async def font_ubot(client: Client, message: Message):
    buttons = [
        [InlineKeyboardButton("Fonts", callback_data="fonts|{}".format(message.text))],
        [InlineKeyboardButton("Names", callback_data="names|{}".format(message.text))]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply("Choose an option:", reply_markup=reply_markup)

@app.on_callback_query()
async def on_callback_query(client: Client, callback_query):
    data = callback_query.data
    option, text = data.split('|')
    if option == "fonts":
        buttons = []
        for i in range(0, len(fonts), 4):
            buttons.append([InlineKeyboardButton(font, callback_data=f"{font}|{text}") for font in fonts[i:i+4]])
        reply_markup = InlineKeyboardMarkup(buttons)
        await callback_query.message.reply("Choose a font:", reply_markup=reply_markup)
    elif option in fonts:
        if option == "smallcap":
            nan = gen_font(text, _smallcap)
        elif option == "monospace":
            nan = gen_font(text, _monospace)
        elif option == "outline":
            nan = gen_font(text, _outline)
        elif option == "script":
            nan = gen_font(text, _script)
        elif option == "blackbubbles":
            nan = gen_font(text, _blackbubbles)
        elif option == "bubbles":
            nan = gen_font(text, _bubbles)
        elif option == "bold":
            nan = gen_font(text, _bold)
        elif option == "bolditalic":
            nan = gen_font(text, _bolditalic)
        await callback_query.message.reply(nan)
    elif option == "names":
        for name in names_list:
            await callback_query.message.reply(name)

@app.on_message(filters.command("listfont") & ~filters.forwarded & ~filters.via_bot)
async def list_fonts(client: Client, message: Message):  
    await message.reply(
        "<b>·¥Ö·¥Ä“ì·¥õ·¥Ä Ä “ì·¥è…¥·¥õs</b>\n\n"
        "<b>‚Ä¢ smallcap</b>\n"
        "<b>‚Ä¢ monospace</b>\n"
        "<b>‚Ä¢ outline</b>\n"
        "<b>‚Ä¢ script</b>\n"
        "<b>‚Ä¢ blackbubbles</b>\n"
        "<b>‚Ä¢ bubbles</b>\n"
        "<b>‚Ä¢ bold</b>\n"
        "<b>‚Ä¢ bolditalic</b>\n\n"
    )

if __name__ == "__main__":
    try:
        logger.info("Starting Pyrogram client...")
        app.run()
        logger.info("Pyrogram client started successfully.")
    except Exception as e:
        logger.error(f"Failed to start Pyrogram client: {str(e)}")
    else:
        app.send_message(OWNER_ID, "Bot started successfully.")
